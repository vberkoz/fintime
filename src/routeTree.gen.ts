/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'

// Create Virtual Routes

const AuthIndexLazyImport = createFileRoute('/_auth/')()
const AuthSettingsLazyImport = createFileRoute('/_auth/settings')()
const AuthProfileLazyImport = createFileRoute('/_auth/profile')()
const AuthMonthlyLazyImport = createFileRoute('/_auth/monthly')()
const AuthCategoriesLazyImport = createFileRoute('/_auth/categories')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth.index.lazy').then((d) => d.Route))

const AuthSettingsLazyRoute = AuthSettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.settings.lazy').then((d) => d.Route),
)

const AuthProfileLazyRoute = AuthProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth.profile.lazy').then((d) => d.Route))

const AuthMonthlyLazyRoute = AuthMonthlyLazyImport.update({
  id: '/monthly',
  path: '/monthly',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth.monthly.lazy').then((d) => d.Route))

const AuthCategoriesLazyRoute = AuthCategoriesLazyImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.categories.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/categories': {
      id: '/_auth/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof AuthCategoriesLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/monthly': {
      id: '/_auth/monthly'
      path: '/monthly'
      fullPath: '/monthly'
      preLoaderRoute: typeof AuthMonthlyLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/settings': {
      id: '/_auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthCategoriesLazyRoute: typeof AuthCategoriesLazyRoute
  AuthMonthlyLazyRoute: typeof AuthMonthlyLazyRoute
  AuthProfileLazyRoute: typeof AuthProfileLazyRoute
  AuthSettingsLazyRoute: typeof AuthSettingsLazyRoute
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCategoriesLazyRoute: AuthCategoriesLazyRoute,
  AuthMonthlyLazyRoute: AuthMonthlyLazyRoute,
  AuthProfileLazyRoute: AuthProfileLazyRoute,
  AuthSettingsLazyRoute: AuthSettingsLazyRoute,
  AuthIndexLazyRoute: AuthIndexLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/categories': typeof AuthCategoriesLazyRoute
  '/monthly': typeof AuthMonthlyLazyRoute
  '/profile': typeof AuthProfileLazyRoute
  '/settings': typeof AuthSettingsLazyRoute
  '/': typeof AuthIndexLazyRoute
}

export interface FileRoutesByTo {
  '/categories': typeof AuthCategoriesLazyRoute
  '/monthly': typeof AuthMonthlyLazyRoute
  '/profile': typeof AuthProfileLazyRoute
  '/settings': typeof AuthSettingsLazyRoute
  '/': typeof AuthIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/categories': typeof AuthCategoriesLazyRoute
  '/_auth/monthly': typeof AuthMonthlyLazyRoute
  '/_auth/profile': typeof AuthProfileLazyRoute
  '/_auth/settings': typeof AuthSettingsLazyRoute
  '/_auth/': typeof AuthIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/categories' | '/monthly' | '/profile' | '/settings' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/categories' | '/monthly' | '/profile' | '/settings' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/categories'
    | '/_auth/monthly'
    | '/_auth/profile'
    | '/_auth/settings'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/categories",
        "/_auth/monthly",
        "/_auth/profile",
        "/_auth/settings",
        "/_auth/"
      ]
    },
    "/_auth/categories": {
      "filePath": "_auth.categories.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/monthly": {
      "filePath": "_auth.monthly.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth.profile.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/settings": {
      "filePath": "_auth.settings.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth.index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
